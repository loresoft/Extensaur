// <auto-generated />
#pragma warning disable
#nullable enable

using System.Data.Common;
using System.Diagnostics.CodeAnalysis;

namespace System.Data;

/// <summary>
/// Provides extension methods for <see cref="IDataRecord"/> to simplify data access operations.
/// </summary>
[ExcludeFromCodeCoverage]
#if PUBLIC_EXTENSIONS
public
#endif
static class DataRecordExtensions
{
    /// <summary>
    /// Gets the value of the specified column by name, returning null if the value is <see cref="DBNull"/>.
    /// </summary>
    /// <param name="dataRecord">The data record to retrieve the value from.</param>
    /// <param name="name">The name of the column to find.</param>
    /// <returns>The value of the specified column, or null if the value is <see cref="DBNull"/>.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="dataRecord"/> is null.</exception>
    /// <exception cref="IndexOutOfRangeException">Thrown when no column with the specified name was found.</exception>
    public static object? GetValue(this IDataRecord dataRecord, string name)
    {
        if (dataRecord is null)
            throw new ArgumentNullException(nameof(dataRecord));

        int ordinal = dataRecord.GetOrdinal(name);
        return dataRecord.IsDBNull(ordinal)
            ? null
            : dataRecord.GetValue(ordinal);
    }

    /// <summary>
    /// Gets the value of the specified column by name and converts it to the requested type.
    /// Returns the default value of <typeparamref name="T"/> if the column value is <see cref="DBNull"/>.
    /// </summary>
    /// <typeparam name="T">The type to convert the column value to.</typeparam>
    /// <param name="dataRecord">The data record to retrieve the value from.</param>
    /// <param name="name">The name of the column to find.</param>
    /// <returns>The value of the specified column converted to <typeparamref name="T"/>, or the default value of <typeparamref name="T"/> if the column value is <see cref="DBNull"/>.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="dataRecord"/> is null.</exception>
    /// <exception cref="IndexOutOfRangeException">Thrown when no column with the specified name was found.</exception>
    /// <exception cref="InvalidCastException">Thrown when the column value cannot be converted to <typeparamref name="T"/>.</exception>
    public static T? GetValue<T>(this IDataRecord dataRecord, string name)
    {
        if (dataRecord is null)
            throw new ArgumentNullException(nameof(dataRecord));

        int ordinal = dataRecord.GetOrdinal(name);

        return GetValue<T>(dataRecord, ordinal);
    }

    /// <summary>
    /// Gets the value of the specified column by ordinal position and converts it to the requested type.
    /// Returns the default value of <typeparamref name="T"/> if the column value is <see cref="DBNull"/>.
    /// </summary>
    /// <typeparam name="T">The type to convert the column value to.</typeparam>
    /// <param name="dataRecord">The data record to retrieve the value from.</param>
    /// <param name="ordinal">The zero-based column ordinal position.</param>
    /// <returns>The value of the specified column converted to <typeparamref name="T"/>, or the default value of <typeparamref name="T"/> if the column value is <see cref="DBNull"/>.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="dataRecord"/> is null.</exception>
    /// <exception cref="IndexOutOfRangeException">Thrown when the column ordinal is out of range.</exception>
    /// <exception cref="InvalidCastException">Thrown when the column value cannot be converted to <typeparamref name="T"/>.</exception>
    public static T? GetValue<T>(this IDataRecord dataRecord, int ordinal)
    {
        if (dataRecord is null)
            throw new ArgumentNullException(nameof(dataRecord));

        if (dataRecord.IsDBNull(ordinal))
            return default;

        if (dataRecord is DbDataReader dataReader)
            return dataReader.GetFieldValue<T>(ordinal);

        return (T)dataRecord.GetValue(ordinal);
    }

    /// <summary>
    /// Determines whether the specified column contains a <see cref="DBNull"/> value.
    /// </summary>
    /// <param name="dataRecord">The data record to check.</param>
    /// <param name="name">The name of the column to check for <see cref="DBNull"/>.</param>
    /// <returns><c>true</c> if the specified column is set to <see cref="DBNull"/>; otherwise, <c>false</c>.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="dataRecord"/> is null.</exception>
    /// <exception cref="IndexOutOfRangeException">Thrown when no column with the specified name was found.</exception>
    public static bool IsDBNull(this IDataRecord dataRecord, string name)
    {
        int ordinal = dataRecord.GetOrdinal(name);
        return dataRecord.IsDBNull(ordinal);
    }
}
